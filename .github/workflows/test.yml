name: Test Module Generator

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Set up PHP (without Composer)
    - name: Set up PHP
      uses: shivammathur/setup-php@2.31.1
      with:
        php-version: '8.2'
    
    # Step 3: Create test-generator.php from test.yml and run HumHub Module Generator Test
    - name: Create and run HumHub Module Generator Test
      run: |
        # Ensure the file is executable by running the class directly
        php -r "require_once 'src/classes/HumHubModuleGenerator.php';"

        # Generate test-generator.php from test.yml
        echo "<?php
        // Load and parse the YAML configuration
        \$testData = yaml_parse_file('test.yml');
        if (\$testData === false) {
            echo 'Error reading the YAML file.\\n';
            exit(1);
        }

        // Extract data from the YAML file
        \$moduleName = \$testData['module']['name'];
        \$moduleDescription = \$testData['module']['description'];
        \$author = \$testData['module']['author']['name'];
        \$email = \$testData['module']['author']['email'];
        \$homepage = \$testData['module']['author']['homepage'];
        \$role = \$testData['module']['author']['role'];

        // Include the HumHubModuleGenerator class
        require_once __DIR__ . '/src/classes/HumHubModuleGenerator.php';

        // Create a new instance of the generator and run it
        \$generator = new HumHubModuleGenerator(\$moduleName, \$moduleDescription, \$author, \$email, \$homepage, \$role);
        \$result = \$generator->generate();

        // Output results
        echo 'Module generated: {$moduleName}\\n';
        echo 'Output: ' . \$result['message'] . '\\n';
        echo 'Zip path: ' . \$result['zipPath'] . '\\n';
        " > test-generator.php
        
        # Run the test-generator.php script
        php test-generator.php

    # Step 4: Ensure correct permissions after generation
    - name: Set correct permissions after module generation
      run: |
        MODULE_PATH="protected/modules/testmodule"
        
        # Apply permissions to the generated files and directories
        chmod -R 755 "$MODULE_PATH"
        chmod -R 755 "$MODULE_PATH/assets"
        chmod -R 755 "$MODULE_PATH/controllers"
        chmod -R 755 "$MODULE_PATH/models"
        chmod -R 755 "$MODULE_PATH/views"
        chmod -R 755 "$MODULE_PATH/resources"
        chmod -R 755 "$MODULE_PATH/resources/js"
        chmod -R 755 "$MODULE_PATH/resources/css"
        chmod 644 "$MODULE_PATH/module.json"

    # Step 5: Validate the generated files
    - name: Validate generated files
      run: |
        MODULE_PATH="protected/modules/testmodule"
        ZIP_PATH="testmodule.zip"
        
        # Check if the generated files exist
        if [ ! -d "$MODULE_PATH" ]; then
          echo "Directory $MODULE_PATH does not exist!"
          exit 1
        fi

        # Check if the zip file was created
        if [ ! -f "$ZIP_PATH" ]; then
          echo "Zip file $ZIP_PATH does not exist!"
          exit 1
        fi

        # Check directory structure
        REQUIRED_DIRS=(
          "$MODULE_PATH/assets"
          "$MODULE_PATH/controllers"
          "$MODULE_PATH/models"
          "$MODULE_PATH/views"
          "$MODULE_PATH/views/default"
          "$MODULE_PATH/resources"
          "$MODULE_PATH/resources/js"
          "$MODULE_PATH/resources/css"
        )

        for DIR in "${REQUIRED_DIRS[@]}"; do
          if [ ! -d "$DIR" ]; then
            echo "Directory $DIR does not exist!"
            exit 1
          fi
        done

        # Validate content of module.json and other files (example check for module.json)
        MODULE_JSON="$MODULE_PATH/module.json"
        if [ ! -f "$MODULE_JSON" ]; then
          echo "$MODULE_JSON does not exist!"
          exit 1
        fi

        MODULE_JSON_CONTENT=$(cat $MODULE_JSON)
        if [[ ! "$MODULE_JSON_CONTENT" =~ "testmodule" ]]; then
          echo "Module ID in module.json is incorrect."
          exit 1
        fi

        # Additional checks for other files (config.php, Module.php, etc.)
        # Example for checking Module.php
        MODULE_PHP="$MODULE_PATH/Module.php"
        if [ ! -f "$MODULE_PHP" ]; then
          echo "$MODULE_PHP does not exist!"
          exit 1
        fi
        MODULE_PHP_CONTENT=$(cat $MODULE_PHP)
        if [[ ! "$MODULE_PHP_CONTENT" =~ "testmodule" ]]; then
          echo "Module class in Module.php is incorrect."
          exit 1
        fi

    # Step 6: Clean up (optional, e.g., remove temporary test files)
    - name: Clean up
      run: |
        rm -f test-generator.php
