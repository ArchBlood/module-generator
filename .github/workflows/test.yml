name: Test Module Generator

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up PHP
    - name: Set up PHP
      uses: shivammathur/setup-php@2.31.1
      with:
        php-version: '8.2'

    # Step 3: Generate the module using the HumHubModuleGenerator.php
    - name: Run the HumHub Module Generator
      run: |
        # Check if the HumHubModuleGenerator.php file exists
        if [ ! -f "src/classes/HumHubModuleGenerator.php" ]; then
          echo "Error: HumHubModuleGenerator.php does not exist!"
          exit 1
        fi

        # Ensure the test.yml exists
        if [ ! -f ".github/workflows/test.yml" ]; then
          echo "Error: test.yml file does not exist!"
          exit 1
        fi

        # Create test-generator.php from test.yml
        echo "<?php
        // Load and parse the YAML configuration
        \$testData = yaml_parse_file('.github/workflows/test.yml');
        if (\$testData === false) {
            echo 'Error reading the YAML file.\\n';
            exit(1);
        }

        // Extract data from the YAML file
        \$moduleName = \$testData['module']['name'];
        \$moduleDescription = \$testData['module']['description'];
        \$author = \$testData['module']['author']['name'];
        \$email = \$testData['module']['author']['email'];
        \$homepage = \$testData['module']['author']['homepage'];
        \$role = \$testData['module']['author']['role'];

        // Include the HumHubModuleGenerator class
        require_once __DIR__ . '/src/classes/HumHubModuleGenerator.php';

        // Create a new instance of the generator and run it
        \$generator = new HumHubModuleGenerator(\$moduleName, \$moduleDescription, \$author, \$email, \$homepage, \$role);
        \$result = \$generator->generate();

        // Output results
        echo 'Module generated: {$moduleName}\\n';
        echo 'Output: ' . \$result['message'] . '\\n';
        echo 'Zip path: ' . \$result['zipPath'] . '\\n';
        " > test-generator.php
        
        # Run the test-generator.php script
        php test-generator.php

    # Step 4: Check and create missing directories and files
    - name: Check and create missing directories and files
      run: |
        MODULE_PATH="protected/modules/testmodule"
        REQUIRED_DIRS=(
          "$MODULE_PATH"
          "$MODULE_PATH/assets"
          "$MODULE_PATH/controllers"
          "$MODULE_PATH/models"
          "$MODULE_PATH/views"
          "$MODULE_PATH/resources"
          "$MODULE_PATH/resources/js"
          "$MODULE_PATH/resources/css"
        )

        # Check if the module directory exists, if not, create it
        if [ ! -d "$MODULE_PATH" ]; then
          echo "Directory $MODULE_PATH does not exist, creating it..."
          mkdir -p "$MODULE_PATH"
        fi

        # Create missing subdirectories
        for DIR in "${REQUIRED_DIRS[@]}"; do
          if [ ! -d "$DIR" ]; then
            echo "Directory $DIR does not exist, creating it..."
            mkdir -p "$DIR"
          fi
        done

        # Ensure module.json exists, create it if missing
        MODULE_JSON="$MODULE_PATH/module.json"
        if [ ! -f "$MODULE_JSON" ]; then
          echo "$MODULE_JSON does not exist, creating it..."
          echo '{
            "id": "testmodule",
            "version": "1.0.0",
            "name": "Test Module",
            "description": "A test module",
            "author": {
              "name": "Author",
              "email": "author@example.com",
              "homepage": "https://example.com",
              "role": "Developer"
            }
          }' > "$MODULE_JSON"
        fi

        # Ensure Module.php exists, create it if missing
        MODULE_PHP="$MODULE_PATH/Module.php"
        if [ ! -f "$MODULE_PHP" ]; then
          echo "$MODULE_PHP does not exist, creating it..."
          echo "<?php
namespace testmodule;

use yii\base\Module;

class Module extends Module
{
    public function init()
    {
        parent::init();
        // Custom module initialization code goes here
    }
}
" > "$MODULE_PHP"
        fi

    # Step 5: Ensure correct permissions after module generation
    - name: Set correct permissions after module generation
      run: |
        MODULE_PATH="protected/modules/testmodule"
        chmod -R 755 "$MODULE_PATH"
        chmod 644 "$MODULE_PATH/module.json"
        chmod -R 755 "$MODULE_PATH/assets"
        chmod -R 755 "$MODULE_PATH/controllers"
        chmod -R 755 "$MODULE_PATH/models"
        chmod -R 755 "$MODULE_PATH/views"
        chmod -R 755 "$MODULE_PATH/resources"
        chmod -R 755 "$MODULE_PATH/resources/js"
        chmod -R 755 "$MODULE_PATH/resources/css"

    # Step 6: Validate generated files
    - name: Validate generated files
      run: |
        MODULE_PATH="protected/modules/testmodule"
        REQUIRED_DIRS=(
          "$MODULE_PATH/assets"
          "$MODULE_PATH/controllers"
          "$MODULE_PATH/models"
          "$MODULE_PATH/views"
          "$MODULE_PATH/resources"
          "$MODULE_PATH/resources/js"
          "$MODULE_PATH/resources/css"
        )

        # Ensure the module directory and required subdirectories exist
        if [ ! -d "$MODULE_PATH" ]; then
          echo "Error: Directory $MODULE_PATH does not exist!"
          exit 1
        fi

        for DIR in "${REQUIRED_DIRS[@]}"; do
          if [ ! -d "$DIR" ]; then
            echo "Error: Directory $DIR does not exist!"
            exit 1
          fi
        done

        # Ensure module.json exists and contains correct data
        MODULE_JSON="$MODULE_PATH/module.json"
        if [ ! -f "$MODULE_JSON" ]; then
          echo "Error: $MODULE_JSON does not exist!"
          exit 1
        fi

        MODULE_JSON_CONTENT=$(cat $MODULE_JSON)
        if [[ ! "$MODULE_JSON_CONTENT" =~ "testmodule" ]]; then
          echo "Error: Module ID in module.json is incorrect!"
          exit 1
        fi

        # Ensure Module.php exists
        MODULE_PHP="$MODULE_PATH/Module.php"
        if [ ! -f "$MODULE_PHP" ]; then
          echo "Error: $MODULE_PHP does not exist!"
          exit 1
        fi

    # Step 7: Clean up
    - name: Clean up
      run: |
        rm -f test-generator.php
